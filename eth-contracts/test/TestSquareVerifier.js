// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let squareVerifier = artifacts.require('SquareVerifier');
let proof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {

    beforeEach(async function () { 
        this.contract = await squareVerifier.new({from: accounts[0]});
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('Test verification with correct proof', async function () {
        // arrange
        let a = proof.proof.a;
        let b = proof.proof.b;
        let c = proof.proof.c;
        let input = proof.inputs;
        // act
        let result = await this.contract.verifyTx.call(a, b, c, input);
        // assert
        assert.equal(result, true, "Correct proof verification fails");
    });

    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async function () {
        // arrange
        let a = proof.proof.a;
        let b = proof.proof.b;
        let c = proof.proof.c;
        // let input = ["9", "1"];
        let input = ["9", "2"];
        // act
        let result = await this.contract.verifyTx.call(a, b, c, input);
        // assert
        assert.equal(result, false, "Incorrect proof verification passes");
    });
})
